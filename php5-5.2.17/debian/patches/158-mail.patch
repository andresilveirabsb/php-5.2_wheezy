--- a/ext/standard/basic_functions.c
+++ b/ext/standard/basic_functions.c
@@ -5764,6 +5764,7 @@ PHP_FUNCTION(ini_set)
 		if (_CHECK_PATH(varname, "error_log") ||
 			_CHECK_PATH(varname, "java.class.path") ||
 			_CHECK_PATH(varname, "java.home") ||
+			_CHECK_PATH(varname, "mail.log") ||
 			_CHECK_PATH(varname, "java.library.path") ||
 			_CHECK_PATH(varname, "vpopmail.directory")) {
 			if (PG(safe_mode) &&(!php_checkuid(Z_STRVAL_PP(new_value), NULL, CHECKUID_CHECK_FILE_AND_DIR))) {
--- a/ext/standard/mail.c
+++ b/ext/standard/mail.c
@@ -23,6 +23,8 @@
 #include <stdio.h>
 #include "php.h"
 #include "ext/standard/info.h"
+#include "ext/standard/php_string.h"
+#include "ext/standard/basic_functions.h"
 
 #if HAVE_SYSEXITS_H
 #include <sysexits.h>
@@ -61,6 +63,8 @@
 		continue;											\
 	}													\
 
+extern long php_getuid(void);
+
 #define MAIL_ASCIIZ_CHECK(str, len)			\
 	p = str;					\
 	e = p + len;					\
@@ -213,24 +217,76 @@ PHPAPI int php_mail(char *to, char *subj
 	char *sendmail_path = INI_STR("sendmail_path");
 	char *sendmail_cmd = NULL;
 #if PHP_SIGCHILD
-	void (*sig_handler)() = NULL;
+        void (*sig_handler)() = NULL;
 #endif
+	char *mail_log = INI_STR("mail.log");
+	zend_bool mail_x_header = INI_BOOL("mail.add_x_header");
+	char *hdr = headers;
+	char *exec_filename = zend_get_executed_filename(TSRMLS_C);
+	char error_time_str[128];
+	struct tm tmbuf;
+	time_t error_time;
+
+	time(&error_time);
+	strftime(error_time_str, sizeof(error_time_str), "%d-%b-%Y %H:%M:%S", php_localtime_r(&error_time, &tmbuf));
+
+
+#define MAIL_RET(val) \
+	if (hdr != headers) {   \
+		efree(hdr);     \
+	}       \
+	return val;     \
+
+	if (mail_log) {
+		char *tmp;
+		int l = spprintf(&tmp, 0, "[%s] mail() on [%s:%d]: To: %s -- Headers: %s\n", error_time_str, exec_filename, zend_get_executed_lineno(TSRMLS_C), to, hdr ? hdr : "");
+		php_stream *stream = php_stream_open_wrapper(mail_log, "a", IGNORE_URL_WIN | REPORT_ERRORS | STREAM_DISABLE_OPEN_BASEDIR, NULL);
+		if (hdr) { /* find all \r\n instances and replace them with spaces, so a log line is always one line long */
+			char *p = tmp;
+			while ((p = strpbrk(p, "\r\n"))) {
+				*p = ' ';
+			}
+			tmp[l - 1] = '\n';
+		}
+//		_php_error_log(3, tmp, mail_log, NULL TSRMLS_CC);
+		if (stream) {
+			php_stream_write(stream, tmp, l);
+			php_stream_close(stream);
+		}
+		efree(tmp);
+	}
+	if (INI_BOOL("mail.add_x_header") == 1) {
+//	if (PG(mail_x_header)) {
+		size_t f_len = 0;
+		char *f = 0;
+		char *tmp = exec_filename;
+		php_basename(tmp, strlen(tmp), NULL, 0, &f, &f_len);
+
+		if (headers != NULL) {
+			spprintf(&headers, 0, "X-PHP-Originating-Script: %ld:%s\r\n%s", php_getuid(), f, headers);
+		} else {
+			spprintf(&headers, 0, "X-PHP-Originating-Script: %ld:%s\r\n", php_getuid(), f);
+		}
+		efree(f);
+		efree(tmp);
+	}
+	efree(exec_filename);
 
 	if (!sendmail_path) {
 #if (defined PHP_WIN32 || defined NETWARE)
 		/* handle old style win smtp sending */
-		if (TSendMail(INI_STR("SMTP"), &tsm_err, &tsm_errmsg, headers, subject, to, message, NULL, NULL, NULL TSRMLS_CC) == FAILURE) {
+                if (TSendMail(INI_STR("SMTP"), &tsm_err, &tsm_errmsg, hdr, subject, to, message, NULL, NULL, NULL TSRMLS_CC) == FAILURE) {
 			if (tsm_errmsg) {
 				php_error_docref(NULL TSRMLS_CC, E_WARNING, "%s", tsm_errmsg);
 				efree(tsm_errmsg);
 			} else {
 				php_error_docref(NULL TSRMLS_CC, E_WARNING, "%s", GetSMErrorText(tsm_err));
 			}
-			return 0;
+			MAIL_RET(0);
 		}
-		return 1;
+		MAIL_RET(1);
 #else
-		return 0;
+		MAIL_RET(0);
 #endif
 	}
 	if (extra_cmd != NULL) {
@@ -273,12 +329,12 @@ PHPAPI int php_mail(char *to, char *subj
 				signal(SIGCHLD, sig_handler);
 			}
 #endif	
-			return 0;
+			MAIL_RET(0);
 		}
 #endif
 		fprintf(sendmail, "To: %s\n", to);
 		fprintf(sendmail, "Subject: %s\n", subject);
-		if (headers != NULL) {
+		if (hdr != NULL) {
 			fprintf(sendmail, "%s\n", headers);
 		}
 		fprintf(sendmail, "\n%s\n", message);
@@ -301,9 +357,9 @@ PHPAPI int php_mail(char *to, char *subj
 #endif
 #endif
 		{
-			return 0;
+			MAIL_RET(0);
 		} else {
-			return 1;
+			MAIL_RET(1);
 		}
 	} else {
 		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Could not execute mail delivery program '%s'", sendmail_path);
@@ -312,10 +368,10 @@ PHPAPI int php_mail(char *to, char *subj
 			signal(SIGCHLD, sig_handler);						
 		}
 #endif
-		return 0;
+		MAIL_RET(0);
 	}
 
-	return 1; /* never reached */
+	MAIL_RET(1); /* never reached */
 }
 /* }}} */
 
--- a/main/main.c
+++ b/main/main.c
@@ -330,6 +330,26 @@ static PHP_INI_MH(OnUpdateErrorLog)
 
 /* {{{ PHP_INI_MH
  */
+static PHP_INI_MH(OnUpdateMailLog)
+{
+	/* Only do the safemode/open_basedir check at runtime */
+	if (stage == PHP_INI_STAGE_RUNTIME || stage == PHP_INI_STAGE_HTACCESS) {
+		if (PG(safe_mode) && (!php_checkuid(new_value, NULL, CHECKUID_CHECK_FILE_AND_DIR))) {
+			return FAILURE;
+		}
+
+		if (PG(open_basedir) && php_check_open_basedir(new_value TSRMLS_CC)) {
+			return FAILURE;
+		}
+
+	}
+	OnUpdateString(entry, new_value, new_value_length, mh_arg1, mh_arg2, mh_arg3, stage TSRMLS_CC);
+	return SUCCESS;
+}
+/* }}} */
+
+/* {{{ PHP_INI_MH
+ */
 static PHP_INI_MH(OnChangeMailForceExtra)
 {
 	/* Don't allow changing it in htaccess */
@@ -449,6 +469,8 @@ PHP_INI_BEGIN()
 
 	PHP_INI_ENTRY("SMTP",						"localhost",PHP_INI_ALL,		NULL)
 	PHP_INI_ENTRY("smtp_port",					"25",		PHP_INI_ALL,		NULL)
+	STD_PHP_INI_BOOLEAN("mail.add_x_header",                        "0",            PHP_INI_SYSTEM,       OnUpdateBool,                    mail_x_header,                  php_core_globals,       core_globals)
+	STD_PHP_INI_ENTRY("mail.log",                                   NULL,           PHP_INI_SYSTEM,       OnUpdateMailLog,                 mail_log,                       php_core_globals,       core_globals)
 	PHP_INI_ENTRY("browscap",					NULL,		PHP_INI_SYSTEM,		NULL)
 	PHP_INI_ENTRY("memory_limit",				"128M",		PHP_INI_ALL,		OnChangeMemoryLimit)
 	PHP_INI_ENTRY("precision",					"14",		PHP_INI_ALL,		OnSetPrecision)
--- a/main/php_globals.h
+++ b/main/php_globals.h
@@ -161,6 +161,8 @@ struct _php_core_globals {
 #endif
 	long max_input_nesting_level;
 	zend_bool in_user_include;
+	zend_bool mail_x_header;
+	char *mail_log;
 	long max_input_vars;
 	zend_bool in_error_log;
 };
--- a/php.ini-dist
+++ b/php.ini-dist
@@ -681,6 +681,12 @@ smtp_port = 25
 ; the 5th parameter to mail(), even in safe mode.
 ;mail.force_extra_parameters =
 
+; Add X-PHP-Originaiting-Script: that will include uid of the script followed by the filename
+;mail.add_x_header = On
+
+; Log all mail() calls including the full path of the script, line #, to address and headers
+;mail.log =
+
 [SQL]
 sql.safe_mode = Off
 
--- a/php.ini-paranoid
+++ b/php.ini-paranoid
@@ -896,6 +896,12 @@ smtp_port = 25
 ; the 5th parameter to mail(), even in safe mode.
 ;mail.force_extra_parameters =
 
+; Add X-PHP-Originaiting-Script: that will include uid of the script followed by the filename
+;mail.add_x_header = On
+
+; Log all mail() calls including the full path of the script, line #, to address and headers
+;mail.log =
+
 [SQL]
 ; This configuration directive is unrelated to safe_mode.
 ; If enabled, connections to databases (like mysql_connect() or mysql_pconnect())
--- a/php.ini-recommended
+++ b/php.ini-recommended
@@ -716,6 +716,12 @@ smtp_port = 25
 ; the 5th parameter to mail(), even in safe mode.
 ;mail.force_extra_parameters =
 
+; Add X-PHP-Originaiting-Script: that will include uid of the script followed by the filename
+;mail.add_x_header = On
+
+; Log all mail() calls including the full path of the script, line #, to address and headers
+;mail.log =
+
 [SQL]
 sql.safe_mode = Off
 
