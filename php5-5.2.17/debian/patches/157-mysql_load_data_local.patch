--- a/ext/mysqli/mysqli_api.c
+++ b/ext/mysqli/mysqli_api.c
@@ -1312,11 +1312,11 @@ PHP_FUNCTION(mysqli_options)
 	}
 	MYSQLI_FETCH_RESOURCE(mysql, MY_MYSQL *, &mysql_link, "mysqli_link", MYSQLI_STATUS_INITIALIZED);
 
-	if ((PG(open_basedir) && PG(open_basedir)[0] != '\0') || PG(safe_mode)) {
-		if(mysql_option == MYSQL_OPT_LOCAL_INFILE) {
-			RETURN_FALSE;
-		}
-	}
+	//if ((PG(open_basedir) && PG(open_basedir)[0] != '\0') || PG(safe_mode)) {
+	//	if(mysql_option == MYSQL_OPT_LOCAL_INFILE) {
+	//		RETURN_FALSE;
+	//	}
+	//}
 
 	switch (Z_TYPE_PP(mysql_value)) {
 		case IS_STRING:
--- a/ext/mysql/php_mysql.c
+++ b/ext/mysql/php_mysql.c
@@ -582,9 +582,9 @@ static void php_mysql_do_connect(INTERNA
 		}
 
 		/* disable local infile option for open_basedir */
-		if (((PG(open_basedir) && PG(open_basedir)[0] != '\0') || PG(safe_mode)) && (client_flags & CLIENT_LOCAL_FILES)) {
-                	client_flags ^= CLIENT_LOCAL_FILES;
-		}
+		//if (((PG(open_basedir) && PG(open_basedir)[0] != '\0') || PG(safe_mode)) && (client_flags & CLIENT_LOCAL_FILES)) {
+                //	client_flags ^= CLIENT_LOCAL_FILES;
+		//}
 
 		hashed_details_length = spprintf(&hashed_details, 0, "mysql_%s_%s_%s_%ld", SAFE_STRING(host_and_port), SAFE_STRING(user), SAFE_STRING(passwd), client_flags);
 	}
--- a/ext/pdo_mysql/mysql_driver.c
+++ b/ext/pdo_mysql/mysql_driver.c
@@ -493,15 +493,15 @@ static int pdo_mysql_handle_factory(pdo_
 			goto cleanup;
 		}
 
-		if ((PG(open_basedir) && PG(open_basedir)[0] != '\0') || PG(safe_mode)) {
-			local_infile = 0;
-		}
-#ifdef MYSQL_OPT_LOCAL_INFILE
+		//if ((PG(open_basedir) && PG(open_basedir)[0] != '\0') || PG(safe_mode)) {
+		//	local_infile = 0;
+		//}
+//#ifdef MYSQL_OPT_LOCAL_INFILE
 		if (mysql_options(H->server, MYSQL_OPT_LOCAL_INFILE, (const char *)&local_infile)) {
 			pdo_mysql_error(dbh);
 			goto cleanup;
 		}
-#endif
+//#endif
 #ifdef MYSQL_OPT_RECONNECT
 		/* since 5.0.3, the default for this option is 0 if not specified.
 		 * we want the old behaviour */
